name: Windows RDP

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Create RDP User
        run: |
          # Generate a 20-character random password guaranteed to meet complexity
          $char_sets = @(
              ([char[]]('a'..'z')),
              ([char[]]('A'..'Z')),
              ([char[]]('0'..'9')),
              ([char[]]('!', '#', '$', '%', '&', '*', '+', '-', '.', '?', '@', '_'))
          )
          
          $PasswordChars = @()
          # Add one character from each set to guarantee complexity
          $PasswordChars += $char_sets[0] | Get-Random
          $PasswordChars += $char_sets[1] | Get-Random
          $PasswordChars += $char_sets[2] | Get-Random
          $PasswordChars += $char_sets[3] | Get-Random
          
          # Add 16 more random characters
          $all_chars = $char_sets -join ''
          1..16 | ForEach-Object { $PasswordChars += Get-Random -InputObject ([char[]]$all_chars) }
          
          # Shuffle the characters and join
          $Password = ($PasswordChars | Get-Random -Count $PasswordChars.Length) -join ''
          
          # Create the user
          New-LocalUser -Name "github" -Password ($Password | ConvertTo-SecureString -AsPlainText -Force) -FullName "GitHub RDP User"
          Add-LocalGroupMember -Group "Administrators" -Member "github"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "github"
          
          echo "RDP_PASSWORD=$Password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "RDP User: github"
          Write-Host "RDP Password: $Password"

      - name: Enable RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

      - name: Download ngrok
        run: |
          Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
          Expand-Archive -Path "ngrok.zip" -DestinationPath "."
          
      - name: Run ngrok Tunnel
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          .\ngrok.exe config add-authtoken $env:NGROK_AUTH_TOKEN
          Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389 --log=stdout" -RedirectStandardOutput "ngrok.log"
          
          # Wait for the log file to be created and contain the URL
          $timeout = 30 # Wait for 30 seconds
          $startTime = Get-Date
          $url_found = $false
          
          while ( ((Get-Date) - $startTime).TotalSeconds -lt $timeout ) {
              if (Test-Path "ngrok.log") {
                  $content = Get-Content "ngrok.log"
                  # Use Select-String for robust log parsing
                  $match = $content | Select-String -Pattern "url=(tcp://.+)"
                  
                  if ($match) {
                      $ngrok_url = $match.Matches[0].Groups[1].Value
                      Write-Host "NGROK URL: $ngrok_url"
                      echo "NGROK_URL=$ngrok_url" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                      $url_found = $true
                      break
                  }
              }
              Start-Sleep -Seconds 2
          }

          if (-not $url_found) {
              Write-Error "Failed to get ngrok URL after $timeout seconds. Printing ngrok.log:"
              # Print the log file so we can see the real error
              Get-Content "ngrok.log"
              exit 1
          }

      - name: Print Credentials
        run: |
          Write-Host "Your RDP machine is ready!"
          Write-Host "--------------------------------"
          Write-Host "Host/IP: ${{ env.NGROK_URL }}"
          Write-Host "Username: github"
          Write-Host "Password: ${{ env.RDP_PASSWORD }}"
          Write-Host "--------------------------------"
          Write-Host "This will run for up to 6 hours. Remember, this violates GitHub's ToS."

      - name: Keep Alive (Loop)
        run: |
          Start-Sleep -Seconds 21000
